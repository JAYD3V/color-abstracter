{"version":3,"file":"hsv.js","sourceRoot":"","sources":["../../src/api/hsv.ts"],"names":[],"mappings":";;AAIA,UAAU;AACV,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAC,OAAO,EAAE,GAAG,EAAC,QAAQ,EAAE,GAAG,IAAI,CAAC;AAGzD,SAAwB,QAAQ,CAAE,GAAQ;IACvC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC;IAC9B,OAAO;QACJ,GAAG,EAAG,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAC9B,GAAG,EAAG,SAAS,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAC9B,GAAG,EAAG,gBAAgB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;KACvC,CAAC;AACL,CAAC;AAPD,2BAOC;AAKD;;;;;;;;mEAQmE;AACnE,SAAS,gBAAgB,CAAE,GAAU,EAAE,GAAU,EAAE,GAAU;IAC1D,OAAO,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAC3D,CAAC;AAKD,SAAS,SAAS,CAAE,GAAU,EAAE,GAAU,EAAE,GAAU;IACnD,MAAM,KAAK,GAAG,gBAAgB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC9C,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAEnC,IAAI,GAAG,GAAG,CAAC,CAAC;IAEZ,IAAI,KAAK,IAAI,CAAC,EAAC;QACZ,GAAG,GAAG,GAAG,KAAK,GAAG;YACd,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG;YACnC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;KAC/D;IAED,GAAG,GAAG,KAAK,CAAC,GAAG,GAAG,EAAE,CAAC,CAAC;IACtB,GAAG,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAE3B,OAAO,GAAG,CAAC;AACd,CAAC;AAKD,SAAS,gBAAgB,CAAE,GAAU,EAAE,GAAU,EAAE,GAAU;IAC1D,mEAAmE;IACnE,OAAO,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AACpD,CAAC;AAKD,SAAS,SAAS,CAAE,GAAU,EAAE,GAAU,EAAE,GAAU;IACnD,MAAM,KAAK,GAAG,gBAAgB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC9C,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAEnC,8DAA8D;IAC9D,+CAA+C;IAC/C,OAAO,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AACtD,CAAC","sourcesContent":["// TYPES\ntype RGB = { red:number, grn:number, blu:number };\ntype HSV = { hue:number, sat:number, val:number };\n\n// GLOBALS\nconst { round: round, max:largest, min:smallest } = Math;\n\n\nexport default function rgbToHsv (rgb: RGB): HSV{\n   const { red, grn, blu } = rgb;\n   return {\n      hue : getRgbHue(red, grn, blu),\n      sat : getRgbSat(red, grn, blu),\n      val : getRgbBrightness(red, grn, blu)\n   };\n}\n\n\n\n\n/**\n * Returns the range of the 3 RGB color values. This number is\n * commonly referred to as \"Delta\" when expressed inside of an\n * algorithm.\n *\n * @example\n      const delta = findRgbRange(100, 20, 35)\n      console.log(delta) // Logs: 80\n * _____________________________________________________________ */\nfunction lengthOfRgbRange (red:number, grn:number, blu:number){\n   return largest(red, grn, blu) - smallest(red, grn, blu);\n}\n\n\n\n\nfunction getRgbHue (red:number, grn:number, blu:number){\n   const delta = lengthOfRgbRange(red, grn, blu);\n   const max = largest(red, grn, blu);\n\n   let hue = 0;\n\n   if (delta != 0){\n      hue = red === max\n         ? ((grn - blu) / delta) % 6 : grn === max\n               ? (blu - red) / delta + 2 : (red - grn) / delta + 4;\n   }\n\n   hue = round(hue * 60);\n   hue += (hue < 0) ? 360 : 0;\n\n   return hue;\n}\n\n\n\n\nfunction getRgbBrightness (red:number, grn:number, blu:number){\n   // Find the color w/ greatest value, the convert it to a percentage\n   return round(largest(red, grn, blu) / 255 * 100);\n}\n\n\n\n\nfunction getRgbSat (red:number, grn:number, blu:number){\n   const delta = lengthOfRgbRange(red, grn, blu);\n   const max = largest(red, grn, blu);\n\n   // find the percentage that the range is of the greatest color\n   // then convert it to a 1-100 percentage value.\n   return (delta <= 0) ? 0 : round(delta / max * 100);\n}\n"]}